{"version":3,"sources":["components/Nav.js","components/Header.js","components/ImageCard.js","App.js","serviceWorker.js","index.js"],"names":["navStyle","color","padding","Nav","props","react_default","a","createElement","className","href","style","result","currentScore","topScore","Header","ImageCard","id","onClick","value","src","image","width","alt","App","state","Images","clicked","gameOver","handleClick","_this","includes","resetGame","console","log","push","pointIncrease","setState","this","score","length","resetIconArray","newScramble","array","counter","index","Math","floor","random","temp","shuffleArray","_this2","components_Nav","components_Header","map","images","components_ImageCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.772a52d5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst navStyle = {\r\n    color: \"black\",\r\n    padding: \"20px\"\r\n}\r\n\r\nfunction Nav(props) {\r\n  return (\r\n    <nav className=\"navbar sticky-top navbar-expand-lg navbar-dark bg-primary\">\r\n      <a className=\"navbar-brand\" href=\"/\">\r\n        Clicky Game\r\n      </a>\r\n      <ul className=\"navbar-nav mx-auto\">\r\n          <p className=\"nav-item\" style={navStyle}>{props.result}</p>\r\n          <p className=\"nav-item\" style={navStyle}>Your score: {props.currentScore}</p>\r\n          <p className=\"nav-item\" style={navStyle}>Top score: {props.topScore}</p>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;","import React from \"react\";\r\n\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"jumbotron jumbotron-fluid\">\r\n        <div className=\"container\">\r\n            <h1 className=\"display-3\">Clicky Game!</h1>\r\n            <p className=\"lead\">Click on an image to earn points, but don't click the same one twice!</p>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Header;","import React from \"react\";\r\n\r\n\r\nfunction ImageCard(props) {\r\n  return (\r\n      <span id={props.id} onClick={() => props.onClick(props.id)} value={props.id}>\r\n        <img src={props.image} width=\"75\" alt=\"image1\"/>\r\n      </span>\r\n  );\r\n}\r\n\r\nexport default ImageCard;","import React, { Component } from 'react';\nimport './App.css';\nimport Nav from './components/Nav.js'\nimport Header from './components/Header.js'\nimport ImageCard from './components/ImageCard.js'\nimport Images from \"./images.json\"\n\nconst shuffleArray = (array) => {\n  \n  let counter = array.length;\n  // While there are elements in the array\n  while (counter > 0) {\n      // Pick a random index\n      let index = Math.floor(Math.random() * counter);\n      // Decrease counter by 1\n      counter--;\n      // And swap the last element with it\n      let temp = array[counter];\n      array[counter] = array[index];\n      array[index] = temp;\n  }\n  return array;\n};\n\nclass App extends Component {\n  \n  state = {\n    Images: Images,\n    currentScore: 0,\n    topScore: 0,\n    result: \"\",\n    clicked: [],\n    gameOver: false\n  }\n\n  componentDidMount() {\n    this.setState({result: \"Click an image to get started!\"})\n  }\n\n  handleClick = (id) => {\n\n    if(!this.state.clicked.includes(id)) {\n      // console.log(`Picture clicked with id: ${id}`);\n      console.log(this.state.currentScore);\n      this.state.clicked.push(id);\n      this.pointIncrease();\n      this.setState({\n        gameOver: false\n      });\n    } else {\n      this.resetGame();\n    }\n  }\n\n  pointIncrease() {\n\n    let score = this.state.currentScore + 1;\n    \n    if (score === this.state.Images.length) {\n      this.setState({\n        result: \"You win! Start clicking to play again!\",\n        topScore: score,\n        currentScore: 0,\n        clicked: [],\n        Images,\n        gameOver: false\n      });\n\n    } else if (score > this.state.topScore) {\n      this.setState({\n        topScore: score,\n        currentScore: score,\n        result: \"You guessed correctly! New high score!\",\n      });\n\n    } else {\n      this.setState({\n        currentScore: score,\n        result: \"You guessed correctly!\"\n      });\n    }\n    this.resetIconArray();\n  }\n\n  resetGame() {\n\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      result: \"You guessed incorrectly! Try again!\",\n      clicked: [],\n      Images,\n      gameOver: true\n    });\n  \n    this.resetIconArray();\n  }\n\n  resetIconArray() {\n\n    let newScramble = shuffleArray(Images);\n    this.setState({Images: newScramble})\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <Nav \n          currentScore={this.state.currentScore} \n          topScore={this.state.topScore} \n          result={this.state.result}/>\n\n        <Header />\n\n        {this.state.Images.map(images =>\n          <ImageCard\n            key={images.id}\n            id={images.id}\n            image={images.image} \n            onClick={this.handleClick}/>\n        )}\n        \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}